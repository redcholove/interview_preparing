'''
Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
'''

class Solution:
    def permuteUnique(self, nums):
        #每個ele只能使用一次
        #ele是有可能有重複的
        self.result = []
        if len(nums) == 0:
            return self.result
            
        #dfs
        #traversal -> marked visited
        #if i == i-1 continue
        nums.sort()
        def dfs(nums, path):
            if len(nums) == len(path):
                self.result.append(path)
                return
            
            for i in range(len(nums)):
                if i > 0 and nums[i] == nums[i-1]:
                    continue
                
                if nums[i] == '#':
                    continue
                
                tmp = nums[i]
                nums[i] = '#'
                dfs(nums, path+[tmp])
                nums[i] = tmp
        dfs(nums, [])
        return self.result
        
if __name__ == '__main__':
    nums = [1,1,2]
    sol = Solution()
    result = sol.permuteUnique(nums)
    print(result)
    print('success')
    print('time complexity: O()')
    print('space complexity: O()')
    
